/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from "react";

export const Index: Record<string, any> ={
  "loading-swap": {
    name: "loading-swap",
    description: "Swaps content with a loading spinner without layout shift.",
    type: "registry:component",
    files: [{
      path: "src/registry/new-york/ui/loading-swap.tsx",
      content: "import { cn } from \"@/lib/utils\"\nimport { Loader2Icon } from \"lucide-react\"\nimport type { ReactNode } from \"react\"\n\nexport function LoadingSwap({\n  isLoading,\n  children,\n  className,\n}: {\n  isLoading: boolean\n  children: ReactNode\n  className?: string\n}) {\n  return (\n    <div className=\"grid grid-cols-1 items-center justify-items-center\">\n      <div\n        className={cn(\n          \"col-start-1 col-end-2 row-start-1 row-end-2 w-full\",\n          isLoading ? \"invisible\" : \"visible\",\n          className,\n        )}\n      >\n        {children}\n      </div>\n      <div\n        className={cn(\n          \"col-start-1 col-end-2 row-start-1 row-end-2\",\n          isLoading ? \"visible\" : \"invisible\",\n          className,\n        )}\n      >\n        <Loader2Icon className=\"animate-spin\" />\n      </div>\n    </div>\n  )\n}",
      type: "registry:ui",
    }],
  },
  "bounce-button": {
    name: "bounce-button",
    description: "An interactive button with smooth hover lift and click scale animations for enhanced user feedback.",
    type: "registry:component",
    files: [{
      path: "src/registry/new-york/ui/bounce-button.tsx",
      content: "import { cn } from \"@/lib/utils\";\ntype ButtonProps= React.HTMLAttributes<HTMLButtonElement>\n\nexport default function Bouncebutton({className,children,...props}:ButtonProps){\n    return <button {...props} className={cn(\`rounded-lg border border-gray-300 bg-gray-100 px-4 py-2 font-semibold text-gray-700 transition-all duration-150 ease-in-out hover:-translate-y-0.5 hover:border-gray-400 hover:bg-gray-200 active:scale-90\`,className)}>{children}</button>\n}\n\n",
      type: "registry:ui",
    }],
  },
  "bounce-button-demo": {
    name: "bounce-button-demo",
    description: "An interactive button with smooth hover lift and click scale animations for enhanced user feedback.",
    type: "registry:example",
    files: [{
      path: "src/registry/new-york/examples/bounce-button-example.tsx",
      content: "import Bouncebutton from \"../ui/bounce-button\";\n\nexport default function BouncebuttonDemo() {\n    return <Bouncebutton>CLICK ME</Bouncebutton>\n}",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/new-york/examples/bounce-button-example.tsx")),
    source: "import Bouncebutton from \"../ui/bounce-button\";\n\nexport default function BouncebuttonDemo() {\n    return <Bouncebutton>CLICK ME</Bouncebutton>\n}",
  },
  "loading-swap-demo": {
    name: "loading-swap-demo",
    description: "Swaps content with a loading spinner without layout shift.",
    type: "registry:example",
    files: [{
      path: "src/registry/new-york/examples/loading-swap-example.tsx",
      content: "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { LoadingSwap } from \"@/registry/new-york/ui/loading-swap\"\nimport { useTransition } from \"react\"\n\nexport default function LoadingButton() {\n  const [isLoading, startTransition] = useTransition()\n\n  return (\n    <Button\n      onClick={() => {\n        startTransition(async () => {\n          // Simulate loading state\n          await new Promise(res => setTimeout(res, 1000))\n        })\n      }}\n    >\n      <LoadingSwap isLoading={isLoading}>Click Me</LoadingSwap>\n    </Button>\n  )\n}",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/new-york/examples/loading-swap-example.tsx")),
    source: "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { LoadingSwap } from \"@/registry/new-york/ui/loading-swap\"\nimport { useTransition } from \"react\"\n\nexport default function LoadingButton() {\n  const [isLoading, startTransition] = useTransition()\n\n  return (\n    <Button\n      onClick={() => {\n        startTransition(async () => {\n          // Simulate loading state\n          await new Promise(res => setTimeout(res, 1000))\n        })\n      }}\n    >\n      <LoadingSwap isLoading={isLoading}>Click Me</LoadingSwap>\n    </Button>\n  )\n}",
  },
  "use-debounce": {
    name: "use-debounce",
    description: "A small hook to debounce a value.",
    type: "registry:component",
    files: [{
      path: "src/registry/new-york/hooks/use-debounce.ts",
      content: "import { useEffect, useState } from \"react\";\n\nexport function useDebounce<T>(value: T, delay = 300) {\n  const [debounced, setDebounced] = useState(value);\n\n  useEffect(() => {\n    const id = setTimeout(() => setDebounced(value), delay);\n    return () => clearTimeout(id);\n  }, [value, delay]);\n\n  return debounced;\n}\n",
      type: "registry:ui",
    }],
  },
  "use-fetch": {
    name: "use-fetch",
    description: "A hook to fetch data from an API endpoint with loading and error states.",
    type: "registry:component",
    files: [{
      path: "src/registry/new-york/hooks/use-fetch.ts",
      content: "import { useCallback, useEffect, useRef, useState } from \"react\";\nimport axios, { AxiosError, AxiosRequestConfig } from \"axios\";\n\ninterface UseFetchState<T> {\n  data: T | null;\n  error: AxiosError | null;\n  loading: boolean;\n  refetch: () => void;\n}\n\nexport function useFetch<T>(\n  url: string,\n  config?: AxiosRequestConfig\n): UseFetchState<T> {\n  const [data, setData] = useState<T | null>(null);\n  const [error, setError] = useState<AxiosError | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  \n  const controllerRef = useRef<AbortController | null>(null);\n  \n\n  const fetchData = useCallback(async () => {\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n    }\n\n    controllerRef.current = new AbortController();\n    setLoading(true);\n\n    try {\n      const response = await axios.get<T>(url, {\n        ...config,\n        signal: controllerRef.current.signal\n      });\n      setData(response.data);\n      setError(null);\n    } catch (err) {\n      if (!axios.isCancel(err)) {\n        setError(err as AxiosError);\n        setData(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [url,config]);\n\n  useEffect(() => {\n    fetchData();\n    return () => {\n      controllerRef.current?.abort();\n    };\n  }, [fetchData]);\n\n  return { data, error, loading, refetch: fetchData };\n}",
      type: "registry:ui",
    }],
  },
  "use-debounce-demo": {
    name: "use-debounce-demo",
    description: "Demo for useDebounce hook",
    type: "registry:example",
    files: [{
      path: "src/registry/new-york/examples/use-debounce-example.tsx",
      content: "\"use client\";\n\nimport { useState } from \"react\";\nimport { useDebounce } from \"../hooks/use-debounce\";\n\nexport default function UseDebounceDemo() {\n  const [q, setQ] = useState(\"\");\n  const debounced = useDebounce(q, 500);\n\n  return (\n    <div className=\"space-y-2\">\n      <input\n        className=\"border px-2 py-1 rounded\"\n        value={q}\n        onChange={(e) => setQ(e.target.value)}\n        placeholder=\"Type to debounce\"\n      />\n      <div className=\"p-2 text-sm\">Immediate: {q}</div>\n      <div className=\"p-2 text-sm\">Debounced: {debounced}</div>\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/new-york/examples/use-debounce-example.tsx")),
    source: "\"use client\";\n\nimport { useState } from \"react\";\nimport { useDebounce } from \"../hooks/use-debounce\";\n\nexport default function UseDebounceDemo() {\n  const [q, setQ] = useState(\"\");\n  const debounced = useDebounce(q, 500);\n\n  return (\n    <div className=\"space-y-2\">\n      <input\n        className=\"border px-2 py-1 rounded\"\n        value={q}\n        onChange={(e) => setQ(e.target.value)}\n        placeholder=\"Type to debounce\"\n      />\n      <div className=\"p-2 text-sm\">Immediate: {q}</div>\n      <div className=\"p-2 text-sm\">Debounced: {debounced}</div>\n    </div>\n  );\n}\n",
  },
  "use-fetch-demo": {
    name: "use-fetch-demo",
    description: "Demo for useFetch hook",
    type: "registry:example",
    files: [{
      path: "src/registry/new-york/examples/use-fetch-example.tsx",
      content: "\"use client\";\nimport React, { useState } from \"react\";\nimport { useFetch } from \"../hooks/use-fetch\"; // Make sure to import your hook\n\n// A simple component to display the post data\nfunction PostDisplay() {\n  const [postId, setPostId] = useState(1);\n\n  // Use your hook. The URL will change whenever \`postId\` changes.\n  const { data, loading, error, refetch } = useFetch<Post>(\n    \`https://jsonplaceholder.typicode.com/posts/\${postId}\`\n  );\n\n  // Handler for manually refetching the *same* post\n  const handleRefetch = () => {\n    console.log(\"Manual refetch requested...\");\n    refetch();\n  };\n\n  // Handlers for changing the URL, which triggers an automatic refetch\n  const getNextPost = () => {\n    setPostId((prevId) => prevId + 1);\n  };\n\n  const getFirstPost = () => {\n    setPostId(1);\n  };\n\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n      <h2>useFetch Example</h2>\n      \n      <div style={{ marginBottom: \"15px\" }}>\n        <button onClick={getNextPost} disabled={loading}>\n          {loading ? \"Loading...\" : \"Fetch Next Post\"}\n        </button>\n        <button onClick={handleRefetch} disabled={loading} style={{ marginLeft: \"10px\" }}>\n          Refetch Post {postId}\n        </button>\n        <button onClick={getFirstPost} disabled={loading || postId === 1} style={{ marginLeft: \"10px\" }}>\n          Reset to Post 1\n        </button>\n      </div>\n\n      {/* 1. Loading State */}\n      {loading && <p>Loading data...</p>}\n\n      {/* 2. Error State */}\n      {error && (\n        <p style={{ color: \"red\" }}>\n          Error fetching data: {error.message}\n        </p>\n      )}\n\n      {/* 3. Data State */}\n      {data && (\n        <article>\n          <h3>{data.title} (Post ID: {data.id})</h3>\n          <p>{data.body}</p>\n        </article>\n      )}\n    </div>\n  );\n}\n\n// Define the type for the data we expect\ninterface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport default PostDisplay;",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/new-york/examples/use-fetch-example.tsx")),
    source: "\"use client\";\nimport React, { useState } from \"react\";\nimport { useFetch } from \"../hooks/use-fetch\"; // Make sure to import your hook\n\n// A simple component to display the post data\nfunction PostDisplay() {\n  const [postId, setPostId] = useState(1);\n\n  // Use your hook. The URL will change whenever \`postId\` changes.\n  const { data, loading, error, refetch } = useFetch<Post>(\n    \`https://jsonplaceholder.typicode.com/posts/\${postId}\`\n  );\n\n  // Handler for manually refetching the *same* post\n  const handleRefetch = () => {\n    console.log(\"Manual refetch requested...\");\n    refetch();\n  };\n\n  // Handlers for changing the URL, which triggers an automatic refetch\n  const getNextPost = () => {\n    setPostId((prevId) => prevId + 1);\n  };\n\n  const getFirstPost = () => {\n    setPostId(1);\n  };\n\n  return (\n    <div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}>\n      <h2>useFetch Example</h2>\n      \n      <div style={{ marginBottom: \"15px\" }}>\n        <button onClick={getNextPost} disabled={loading}>\n          {loading ? \"Loading...\" : \"Fetch Next Post\"}\n        </button>\n        <button onClick={handleRefetch} disabled={loading} style={{ marginLeft: \"10px\" }}>\n          Refetch Post {postId}\n        </button>\n        <button onClick={getFirstPost} disabled={loading || postId === 1} style={{ marginLeft: \"10px\" }}>\n          Reset to Post 1\n        </button>\n      </div>\n\n      {/* 1. Loading State */}\n      {loading && <p>Loading data...</p>}\n\n      {/* 2. Error State */}\n      {error && (\n        <p style={{ color: \"red\" }}>\n          Error fetching data: {error.message}\n        </p>\n      )}\n\n      {/* 3. Data State */}\n      {data && (\n        <article>\n          <h3>{data.title} (Post ID: {data.id})</h3>\n          <p>{data.body}</p>\n        </article>\n      )}\n    </div>\n  );\n}\n\n// Define the type for the data we expect\ninterface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport default PostDisplay;",
  },
}