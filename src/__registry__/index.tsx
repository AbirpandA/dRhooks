/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from "react";

export const Index: Record<string, any> ={
  "loading-swap": {
    name: "loading-swap",
    description: "Swaps content with a loading spinner without layout shift.",
    type: "registry:component",
    files: [{
      path: "src/registry/new-york/ui/loading-swap.tsx",
      content: "import { cn } from \"@/lib/utils\"\nimport { Loader2Icon } from \"lucide-react\"\nimport type { ReactNode } from \"react\"\n\nexport function LoadingSwap({\n  isLoading,\n  children,\n  className,\n}: {\n  isLoading: boolean\n  children: ReactNode\n  className?: string\n}) {\n  return (\n    <div className=\"grid grid-cols-1 items-center justify-items-center\">\n      <div\n        className={cn(\n          \"col-start-1 col-end-2 row-start-1 row-end-2 w-full\",\n          isLoading ? \"invisible\" : \"visible\",\n          className,\n        )}\n      >\n        {children}\n      </div>\n      <div\n        className={cn(\n          \"col-start-1 col-end-2 row-start-1 row-end-2\",\n          isLoading ? \"visible\" : \"invisible\",\n          className,\n        )}\n      >\n        <Loader2Icon className=\"animate-spin\" />\n      </div>\n    </div>\n  )\n}",
      type: "registry:ui",
    }],
  },
  "bounce-button": {
    name: "bounce-button",
    description: "An interactive button with smooth hover lift and click scale animations for enhanced user feedback.",
    type: "registry:component",
    files: [{
      path: "src/registry/new-york/ui/bounce-button.tsx",
      content: "import { cn } from \"@/lib/utils\";\ntype ButtonProps= React.HTMLAttributes<HTMLButtonElement>\n\nexport default function Bouncebutton({className,children,...props}:ButtonProps){\n    return <button {...props} className={cn(\`rounded-lg border border-gray-300 bg-gray-100 px-4 py-2 font-semibold text-gray-700 transition-all duration-150 ease-in-out hover:-translate-y-0.5 hover:border-gray-400 hover:bg-gray-200 active:scale-90\`,className)}>{children}</button>\n}\n\n",
      type: "registry:ui",
    }],
  },
  "bounce-button-demo": {
    name: "bounce-button-demo",
    description: "An interactive button with smooth hover lift and click scale animations for enhanced user feedback.",
    type: "registry:example",
    files: [{
      path: "src/registry/new-york/examples/bounce-button-example.tsx",
      content: "import Bouncebutton from \"../ui/bounce-button\";\n\nexport default function BouncebuttonDemo() {\n    return <Bouncebutton>CLICK ME</Bouncebutton>\n}",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/new-york/examples/bounce-button-example.tsx")),
    source: "import Bouncebutton from \"../ui/bounce-button\";\n\nexport default function BouncebuttonDemo() {\n    return <Bouncebutton>CLICK ME</Bouncebutton>\n}",
  },
  "loading-swap-demo": {
    name: "loading-swap-demo",
    description: "Swaps content with a loading spinner without layout shift.",
    type: "registry:example",
    files: [{
      path: "src/registry/new-york/examples/loading-swap-example.tsx",
      content: "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { LoadingSwap } from \"@/registry/new-york/ui/loading-swap\"\nimport { useTransition } from \"react\"\n\nexport default function LoadingButton() {\n  const [isLoading, startTransition] = useTransition()\n\n  return (\n    <Button\n      onClick={() => {\n        startTransition(async () => {\n          // Simulate loading state\n          await new Promise(res => setTimeout(res, 1000))\n        })\n      }}\n    >\n      <LoadingSwap isLoading={isLoading}>Click Me</LoadingSwap>\n    </Button>\n  )\n}",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/new-york/examples/loading-swap-example.tsx")),
    source: "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { LoadingSwap } from \"@/registry/new-york/ui/loading-swap\"\nimport { useTransition } from \"react\"\n\nexport default function LoadingButton() {\n  const [isLoading, startTransition] = useTransition()\n\n  return (\n    <Button\n      onClick={() => {\n        startTransition(async () => {\n          // Simulate loading state\n          await new Promise(res => setTimeout(res, 1000))\n        })\n      }}\n    >\n      <LoadingSwap isLoading={isLoading}>Click Me</LoadingSwap>\n    </Button>\n  )\n}",
  },
}